{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["model","KNN","load","modelJSON","useStyles","makeStyles","theme","form","margin","spacing","width","Form","props","onChange","classes","useState","Object","fromEntries","params","map","p","key","default","state","setState","useEffect","handleInput","type","event","value","Number","target","checked","prev","className","noValidate","autoComplete","filter","param","FormControlLabel","control","Switch","Boolean","e","label","name","TextField","variant","Result","features","values","predict","keys","App","setFeatures","Grid","container","justify","alignItems","item","xs","bind","this","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+rhLAOMA,EAAQC,IAAIC,KAAKC,GAEjBC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJ,uBAAwB,CACtBC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,YAKb,SAASC,EAAKC,GAAQ,IACZC,EAAaD,EAAbC,SACFC,EAAUV,IAFG,EAIOW,mBACxBC,OAAOC,YAAYC,EAAOC,KAAI,SAAAC,GAAC,MAAI,CAACA,EAAEC,IAAKD,EAAEE,cAL5B,mBAIZC,EAJY,KAILC,EAJK,KAQnBC,qBAAU,WAAQZ,EAASU,KAAU,CAACV,EAAUU,IAEhD,IAAMG,EAAc,SAACC,EAAMN,EAAKO,GAC9B,IAAMC,EAAQC,OAAiB,WAATH,EAAqBC,EAAMG,OAAOF,MAAQD,EAAMG,OAAOC,SAC7ER,GAAS,SAAAS,GAAI,kCAAUA,GAAV,kBAAiBZ,EAAMQ,QAGtC,OACE,uBAAMK,UAAWpB,EAAQP,KAAM4B,YAAU,EAACC,aAAa,MAAvD,UACE,8BACGlB,EAAOmB,QAAO,SAAAjB,GAAC,MAAe,YAAXA,EAAEO,QAAoBR,KAAI,SAAAmB,GAAK,OACjD,cAACC,EAAA,EAAD,CAEEC,QAAS,cAACC,EAAA,EAAD,CACPT,QAASU,QAAQnB,EAAMe,EAAMjB,MAC7BR,SAAU,SAAA8B,GAAC,OAAIjB,EAAY,UAAWY,EAAMjB,IAAKsB,MAEnDC,MAAON,EAAMO,MALRP,EAAMjB,UASjB,8BACGH,EAAOmB,QAAO,SAAAjB,GAAC,MAAe,WAAXA,EAAEO,QAAmBR,KAAI,SAAAmB,GAAK,OAChD,cAACQ,EAAA,EAAD,CAEEF,MAAON,EAAMO,KACbhB,MAAON,EAAMe,EAAMjB,KACnBM,KAAK,SACLoB,QAAQ,WACRlC,SAAU,SAAA8B,GAAC,OAAIjB,EAAY,SAAUY,EAAMjB,IAAKsB,KAL3CL,EAAMjB,aAavB,SAAS2B,EAAOpC,GAAQ,IACdqC,EAAarC,EAAbqC,SAER,GAAIA,EAAU,CACZ,IAAIC,EAAShC,EAAOC,KAAI,SAAAC,GAAC,OAAI6B,EAAS7B,EAAEC,QACpC8B,EAAUnD,EAAMmD,QAAQ,CAACD,IAAS,GAEtC,OACE,gCACE,gEAAoBC,KACnBnC,OAAOoC,KAAKH,GAAU9B,KAAI,SAAAE,GAAG,OAC5B,8BAAcA,EAAd,KAAqB4B,EAAS5B,KAAtBA,SAKd,OAAO,KAsBIgC,MAlBf,WACkBjD,IAAhB,IADa,EAGmBW,mBAAS,MAH5B,mBAGNkC,EAHM,KAGIK,EAHJ,KAMb,OACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,WAAW,WAAWjD,QAAS,EAAhE,UACE,cAAC8C,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACE,cAACjD,EAAD,CAAME,SALO,SAAAoC,GAAQ,OAAIK,EAAYL,IAKVY,KAAKC,UAElC,cAACP,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACE,cAACZ,EAAD,CAAQC,SAAUA,UCnFXc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.58843820.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles, Grid, TextField, FormControlLabel, Switch } from '@material-ui/core';\n\nimport KNN from 'ml-knn'\nimport params from './params.json'\nimport modelJSON from './model.json'\n\nconst model = KNN.load(modelJSON)\n\nconst useStyles = makeStyles(theme => ({\n  form: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '22%',\n    },\n  },\n}))\n\nfunction Form(props) {\n  const { onChange } = props;\n  const classes = useStyles()\n\n  const [state, setState] = useState(\n    Object.fromEntries(params.map(p => [p.key, p.default]))\n  )\n\n  useEffect(() => { onChange(state) }, [onChange, state])\n\n  const handleInput = (type, key, event) => {\n    const value = Number((type === \"number\") ? event.target.value : event.target.checked)\n    setState(prev => ({ ...prev, [key]: value }))\n  }\n\n  return (\n    <form className={classes.form} noValidate autoComplete=\"off\">\n      <div>\n        {params.filter(p => p.type === \"boolean\").map(param => (\n          <FormControlLabel\n            key={param.key}\n            control={<Switch\n              checked={Boolean(state[param.key])}\n              onChange={e => handleInput(\"boolean\", param.key, e)}\n            />}\n            label={param.name}\n          />\n        ))}\n      </div>\n      <div>\n        {params.filter(p => p.type === \"number\").map(param => (\n          <TextField\n            key={param.key}\n            label={param.name}\n            value={state[param.key]}\n            type=\"number\"\n            variant=\"outlined\"\n            onChange={e => handleInput(\"number\", param.key, e)}\n          />\n        ))}\n      </div>\n    </form>\n  )\n}\n\nfunction Result(props) {\n  const { features } = props;\n\n  if (features) {\n    let values = params.map(p => features[p.key])\n    let predict = model.predict([values])[0]\n\n    return (\n      <div>\n        <h2>Fiyat Aralığı: {predict}</h2>\n        {Object.keys(features).map(key => (\n          <p key={key}>{key}: {features[key]}</p>\n        ))}\n      </div>\n    )\n  } else {\n    return null\n  }\n}\n\nfunction App() {\n  const classes = useStyles()\n\n  const [features, setFeatures] = useState(null)\n  const handleForm = features => setFeatures(features)\n\n  return (\n    <Grid container justify=\"center\" alignItems=\"baseline\" spacing={2}>\n      <Grid item xs={6}>\n        <Form onChange={handleForm.bind(this)} />\n      </Grid>\n      <Grid item xs={3}>\n        <Result features={features} />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}