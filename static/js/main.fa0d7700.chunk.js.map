{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["model","KNN","load","modelJSON","useStyles","makeStyles","theme","form","margin","spacing","width","exampleSelect","marginTop","exampleButton","height","Form","props","onChange","classes","useState","examples","features","state","setState","id","preset","setPreset","useEffect","handleInput","type","key","event","value","Number","target","checked","prev","className","noValidate","autoComplete","params","filter","p","map","param","FormControlLabel","control","Switch","Boolean","e","label","name","TextField","variant","FormControl","InputLabel","Select","native","Button","color","onClick","find","Result","values","predict","Object","keys","App","setFeatures","Grid","container","justify","alignItems","item","xs","bind","this","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa0d7700.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  makeStyles,\n  Button,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  InputLabel,\n  Select,\n  TextField,\n  Switch\n} from '@material-ui/core';\n\nimport KNN from 'ml-knn'\nimport params from './params.json'\nimport examples from './examples.json'\nimport modelJSON from './model.json'\n\nconst model = KNN.load(modelJSON)\n\nconst useStyles = makeStyles(theme => ({\n  form: {\n    '& .MuiFormControl-root': {\n      margin: theme.spacing(1),\n      width: '22%',\n    },\n  },\n  exampleSelect: {\n    marginTop: theme.spacing(4),\n  },\n  exampleButton: {\n    marginTop: \"8px\",\n    height: \"56px\"\n  }\n}))\n\nfunction Form(props) {\n  const { onChange } = props;\n  const classes = useStyles()\n\n  const [state, setState] = useState(examples[0].features)\n  const [preset, setPreset] = useState(examples[0].id)\n\n  useEffect(() => { onChange(state) }, [onChange, state])\n\n  const handleInput = (type, key, event) => {\n    const value = Number((type === \"number\") ? event.target.value : event.target.checked)\n    setState(prev => ({ ...prev, [key]: value }))\n  }\n  const loadPreset = () => setState(examples.find(e => e.id === preset).features)\n\n  return (\n    <form className={classes.form} noValidate autoComplete=\"off\">\n      <div>\n        {params.filter(p => p.type === \"boolean\").map(param => (\n          <FormControlLabel\n            key={param.key}\n            control={<Switch\n              checked={Boolean(state[param.key])}\n              onChange={e => handleInput(\"boolean\", param.key, e)}\n            />}\n            label={param.name}\n          />\n        ))}\n      </div>\n      <div>\n        {params.filter(p => p.type === \"number\").map(param => (\n          <TextField\n            key={param.key}\n            label={param.name}\n            value={state[param.key]}\n            type=\"number\"\n            variant=\"outlined\"\n            onChange={e => handleInput(\"number\", param.key, e)}\n          />\n        ))}\n      </div>\n      <div className={classes.exampleSelect}>\n        <FormControl variant=\"outlined\">\n          <InputLabel>Hazır Cihazlar</InputLabel>\n          <Select\n            native\n            value={preset}\n            onChange={e => setPreset(Number(e.target.value))}\n            label=\"Hazır Cihazlar\"\n          >\n            {examples.map(e => (\n              <option key={e.id} value={e.id}>Cihaz {e.id}</option>\n            ))}\n          </Select>\n        </FormControl>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.exampleButton}\n          onClick={loadPreset}\n        >\n          Yükle\n        </Button>\n      </div>\n    </form>\n  )\n}\n\nfunction Result(props) {\n  const { features } = props;\n\n  if (features) {\n    let values = params.map(p => features[p.key])\n    let predict = model.predict([values])[0]\n\n    return (\n      <div>\n        <h2>Fiyat Sınıfı: {predict}</h2>\n        {Object.keys(features).map(key => (\n          <p key={key}>{key}: {features[key]}</p>\n        ))}\n      </div>\n    )\n  } else {\n    return null\n  }\n}\n\nfunction App() {\n  const classes = useStyles()\n\n  const [features, setFeatures] = useState(null)\n  const handleForm = features => setFeatures(features)\n\n  return (\n    <Grid container justify=\"center\" alignItems=\"baseline\" spacing={2}>\n      <Grid item xs={6}>\n        <Form onChange={handleForm.bind(this)} />\n      </Grid>\n      <Grid item xs={3}>\n        <Result features={features} />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}